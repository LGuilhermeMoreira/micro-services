services:
  broker-service:
    build: 
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      replicas: 1
      mode: replicated
    container_name: broker-service
    networks:
      - app-network

  authentition-service:
    build: 
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    ports:
      - "8081:80"
    deploy:
      replicas: 1
      mode: replicated
    container_name: authentication-service
    environment:
      DNS: "host=postgres port=5432 dbname=user user=postgres password=password sslmode=disable timezone=UTC connect_timeout=5"
    networks:
      - app-network

  logger-service:
    build: 
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always
    ports:
      - "8082:80"
    deploy:
      replicas: 1
      mode: replicated
    container_name: logger-service
    networks:
      - app-network

  mailer-service:
    build: 
      context: ./../mailer-service
      dockerfile: ./../mailer-service/mailer-service.dockerfile
    restart: always
    ports:
      - "8083:80"
    deploy:
      replicas: 1
      mode: replicated
    container_name: mailer-service
    networks:
      - app-network
    environment:
      MAIL_PORT: 1025
      MAIL_DOMAIN: "localhost"
      MAIL_HOST: "mailhog"
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      MAIL_ENCRYPTION: "none"
      FROM_NAME: "John Smith"
      FROM_ADDRESS: "john.smith@example.com"

  listener-service:
    build:
      context: ./../listener-service
      dockerfile: ./../listener-service/listener-service.dockerfile
    restart: always
    ports:
      - "8084:80"
    deploy:
      replicas: 1
      mode: replicated
    container_name: "listener-service"
    networks:
      - app-network


  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/
    networks:
      - app-network

  mongodb:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db/
    networks:
      - app-network

  mailhog:
    image: 'mailhog/mailhog:latest'
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network

  rabbitmq:
      image: 'rabbitmq:3.8.16-management'
      ports:
        - "5672:5672"
        - "15672:15672"
        - "15692:15692"
      deploy:
        mode: replicated
        replicas: 1
      environment:
        RABBITMQ_DEFAULT_USER: "user"
        RABBITMQ_DEFAULT_PASS: "password"
        RABBITMQ_DEFAULT_VHOST: "/"
      volumes:
        - ./db-data/rabbitmq/:/var/lib/rabbitmq/
      networks:
        - app-network
      

networks:
  app-network:
    driver: bridge